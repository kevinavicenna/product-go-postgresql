# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Install dependencies
      run: go mod tidy

    - name: Build the application
      run: |
        echo "Building the Go application..."
        go build -o testing main.go
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: Docker Build
      run: |
        docker build -t product_go_postgresql:${{ github.sha }} .
        docker tag product_go_postgresql:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/product_go_postgresql:latest
    
    - name: Trivy Scan
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image product_go_postgresql:latest

    - name: Docker Hub login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    
    - name: Docker Push 
      run: |
        docker image push ${{ secrets.DOCKER_USERNAME }}/product_go_postgresql:latest




  deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
        
    - name: Install dependencies
      run: go mod download
      
    - name: Build application
      run: go build -o testing ./main.go 

    # - name: Set up SSH
    #   uses: webfactory/ssh-agent@v1
    #   with:
    #     ssh-private-key: #${{ #secrets.SSH_PRIVATE_KEY }}#
    
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          sudo systemctl stop myapp || true

          mkdir -p ~/testing
          rm -rf ~/testing/*
          scp -r testing ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/testing/

          cd ~/testing
          sudo systemctl start testing
